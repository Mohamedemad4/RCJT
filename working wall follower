#include <Wire.h>
#include <Servo.h>
#include <math.h>

#include "AFMotor.h"
#include "NewPing.h"
#include "SoftwareWire.h"
#include "HMC5883L.h"
#include "bmp085.h"
#include "I2Cdev.h"
#include "MPU6050.h"

//Left Sensor connected to A8,A9
//Right Sensor connected to Digital pins 20,21
SoftwareWire Wire2( A4, A5);// SDA,SCL

MPU6050 accc ;
HMC5883L mag;

Servo deploy_servo;
Servo cam;
volatile int cpos = 4; //contains current position of the cam Servo

#define max_dist 400
#define speed_default 130
#define speed_max 200
NewPing left_us(A0, A0, max_dist);
NewPing center_us(A1, A1, max_dist);
NewPing right_us(A2, A2, max_dist);

AF_DCMotor fleft(2, MOTOR12_1KHZ);
AF_DCMotor fright(1, MOTOR12_1KHZ);

AF_DCMotor bleft(3, MOTOR34_1KHZ);
AF_DCMotor bright(4, MOTOR34_1KHZ);

    int turnr = 0;
    int p;
    int maxp;
    int minp;


void setup() {

  //Push Button
  pinMode(A11, INPUT_PULLUP);
  pinMode(A10, 1);

  //IR Color Sensor
  pinMode(A3, INPUT);

  deploy_servo.attach(10);
  deploy_servo.write(130);

  digitalWrite(A10, 0);

  cam.attach(9);
  pinMode(22, INPUT_PULLUP);
  pinMode(23, INPUT_PULLUP);
  pinMode(24, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(18), checkForIns, CHANGE);

  Wire.begin();
  Wire2.begin();


  accc.initialize(); //see README
  accc.setI2CBypassEnabled(true);
  bmp085Init(0);    // Set Baseline @ sea level
  mag.initialize();
  Serial.begin(9600);

  Serial.println("Ready!");

  while (digitalRead(A11) == 1) {
    delay(50);
  }
    Serial.println("Starting...");
  delay(1000);
}

void lop() { //each iteration should take up a tile TODO:
  sensorDebug();
  //turn(90,1);
  delay(1000);

}



void loop(){
  //right wall follower 
      while(GetDist(center_us)>15){
          drive_forward();
        }
 

         if(GetDist(center_us)<=15 && GetDist(left_us)<7 ){ //found a wall
          turn(90,1);
          }

         if(GetDist(center_us)<=7 && GetDist(right_us)<=7 && GetDist(left_us)<=7){  //emergyncy
          turn(180,1);
          }

          if(GetDist(left_us)>=7){//always left
            turn(90,0);
            }

          

          
        
      }
        
   
  
  
   
